using Rnd.Api.Modules.Basic.Characters;
using Rnd.Api.Modules.RndCore.Characters;

namespace Rnd.Api.Modules.RndCore.Parameters.SkillParameters;

public class FinalSkills : Skills
{
    public FinalSkills(ICharacter character) : base(character) { }

    public override Skill Bruteforce => Character.Effects
        .Aggregate(GetSkill(SkillType.Bruteforce, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Struggle => Character.Effects
        .Aggregate(GetSkill(SkillType.Struggle, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Blocking => Character.Effects
        .Aggregate(GetSkill(SkillType.Blocking, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Fortitude => Character.Effects
        .Aggregate(GetSkill(SkillType.Fortitude, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Fencing => Character.Effects
        .Aggregate(GetSkill(SkillType.Fencing, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Throwing => Character.Effects
        .Aggregate(GetSkill(SkillType.Throwing, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Shooting => Character.Effects
        .Aggregate(GetSkill(SkillType.Shooting, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Alchemy => Character.Effects
        .Aggregate(GetSkill(SkillType.Alchemy, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Enchantment => Character.Effects
        .Aggregate(GetSkill(SkillType.Enchantment, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Magic => Character.Effects
        .Aggregate(GetSkill(SkillType.Magic, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Necromancy => Character.Effects
        .Aggregate(GetSkill(SkillType.Necromancy, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Shamanism => Character.Effects
        .Aggregate(GetSkill(SkillType.Shamanism, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Priesthood => Character.Effects
        .Aggregate(GetSkill(SkillType.Priesthood, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Demonology => Character.Effects
        .Aggregate(GetSkill(SkillType.Demonology, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Metamorphism => Character.Effects
        .Aggregate(GetSkill(SkillType.Metamorphism, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill SleightOfHand => Character.Effects
        .Aggregate(GetSkill(SkillType.SleightOfHand, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Acrobatics => Character.Effects
        .Aggregate(GetSkill(SkillType.Acrobatics, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Stealth => Character.Effects
        .Aggregate(GetSkill(SkillType.Stealth, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Reaction => Character.Effects
        .Aggregate(GetSkill(SkillType.Reaction, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Tracking => Character.Effects
        .Aggregate(GetSkill(SkillType.Tracking, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Navigation => Character.Effects
        .Aggregate(GetSkill(SkillType.Navigation, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Riding => Character.Effects
        .Aggregate(GetSkill(SkillType.Riding, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Streets => Character.Effects
        .Aggregate(GetSkill(SkillType.Streets, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Survival => Character.Effects
        .Aggregate(GetSkill(SkillType.Survival, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Rhetoric => Character.Effects
        .Aggregate(GetSkill(SkillType.Rhetoric, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Empathy => Character.Effects
        .Aggregate(GetSkill(SkillType.Empathy, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Polemics => Character.Effects
        .Aggregate(GetSkill(SkillType.Polemics, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Networking => Character.Effects
        .Aggregate(GetSkill(SkillType.Networking, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Authority => Character.Effects
        .Aggregate(GetSkill(SkillType.Authority, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill SelfControl => Character.Effects
        .Aggregate(GetSkill(SkillType.SelfControl, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Research => Character.Effects
        .Aggregate(GetSkill(SkillType.Research, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Medicine => Character.Effects
        .Aggregate(GetSkill(SkillType.Medicine, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Nature => Character.Effects
        .Aggregate(GetSkill(SkillType.Nature, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill History => Character.Effects
        .Aggregate(GetSkill(SkillType.History, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Society => Character.Effects
        .Aggregate(GetSkill(SkillType.Society, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Engineering => Character.Effects
        .Aggregate(GetSkill(SkillType.Engineering, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Science => Character.Effects
        .Aggregate(GetSkill(SkillType.Science, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Metallurgy => Character.Effects
        .Aggregate(GetSkill(SkillType.Metallurgy, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Farming => Character.Effects
        .Aggregate(GetSkill(SkillType.Farming, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Mining => Character.Effects
        .Aggregate(GetSkill(SkillType.Mining, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Construction => Character.Effects
        .Aggregate(GetSkill(SkillType.Construction, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Craft => Character.Effects
        .Aggregate(GetSkill(SkillType.Craft, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Mechanisms => Character.Effects
        .Aggregate(GetSkill(SkillType.Mechanisms, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Chemistry => Character.Effects
        .Aggregate(GetSkill(SkillType.Chemistry, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Treasures => Character.Effects
        .Aggregate(GetSkill(SkillType.Treasures, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Culture => Character.Effects
        .Aggregate(GetSkill(SkillType.Culture, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Creation => Character.Effects
        .Aggregate(GetSkill(SkillType.Creation, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Inspiration => Character.Effects
        .Aggregate(GetSkill(SkillType.Inspiration, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Performance => Character.Effects
        .Aggregate(GetSkill(SkillType.Performance, true), (attribute, effect) => effect.ModifyParameter(attribute));
    public override Skill Artistry => Character.Effects
        .Aggregate(GetSkill(SkillType.Artistry, true), (attribute, effect) => effect.ModifyParameter(attribute));
}